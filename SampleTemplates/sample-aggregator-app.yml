apiVersion: v1
kind: Template
metadata:
  name: solace-springboot-messaging-sample
  annotations:
    description: Sample Spring Boot Application that demonstrate messaging with the Solace VMR
    iconClass: icon-jboss
    tags: 'instant-app,springboot,gradle,java'
objects:
  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      name: '${APPLICATION_NAME}-vmr'
    spec:
      strategy:
        type: Rolling
        rollingParams:
          timeoutSeconds: 1200
          maxSurge: 0
          maxUnavailable: 1
      triggers:
        - type: ConfigChange
      replicas: 1
      selector:
        deploymentconfig: '${APPLICATION_NAME}-vmr'
      template:
        metadata:
          name: '${APPLICATION_NAME}-vmr'
          labels:
            name: '${APPLICATION_NAME}-vmr'
            deploymentconfig: '${APPLICATION_NAME}-vmr'
        spec:
          volumes:
          - name: dshm
            emptyDir:
              medium: Memory
          - name: poddata-${ROUTER_NAME}
            persistentVolumeClaim:
              claimName: poddata-${ROUTER_NAME}
          containers:
            - name: "solace-vmr"
              env:
              - name: USERNAME_${ADMIN_USER}_PASSWORD
                value: '${ADMIN_PASSWORD}'
              - name: USERNAME_${ADMIN_USER}_GLOBALACCESSLEVEL
                value: 'admin'
              - name: SERVICE_SSH_PORT
                value: '2222'
              - name: ALWAYS_DIE_ON_FAILURE
                value: '0'
              - name: ROUTERNAME
                value: '${ROUTER_NAME}'
              - name: NODETYPE
                value: 'message_routing'
              image: "${VMR_IMAGE}"
              volumeMounts:
              - mountPath: /dev/shm
                name: dshm
              - mountPath: /usr/sw/internalSpool/softAdb
                subPath: softAdb
                name: poddata-${ROUTER_NAME}
              - mountPath: /usr/sw/adb
                subPath: adb
                name: poddata-${ROUTER_NAME}
              - mountPath:  /usr/sw/var
                subPath: var
                name: poddata-${ROUTER_NAME}
              - mountPath:  /usr/sw/internalSpool
                subPath: internalSpool
                name: poddata-${ROUTER_NAME}
              - mountPath:  /var/lib/solace/diags
                subPath: diags
                name: poddata-${ROUTER_NAME}
              - mountPath:  /usr/sw/jail
                subPath: jail
                name: poddata-${ROUTER_NAME}
              securityContext:
                privileged: false
              ports:
              - containerPort: 8080
                protocol: TCP
              - containerPort: 60943
                protocol: TCP
              - containerPort: 55555
                protocol: TCP
              - containerPort: 55003
                protocol: TCP
              - containerPort: 55556
                protocol: TCP
              - containerPort: 55443
                protocol: TCP
              - containerPort: 6080
                protocol: TCP
              - containerPort: 60443
                protocol: TCP
              - containerPort: 1883
                protocol: TCP
              - containerPort: 8883
                protocol: TCP
              - containerPort: 8000
                protocol: TCP
              - containerPort: 8443
                protocol: TCP
              - containerPort: 9000
                protocol: TCP
              - containerPort: 9443
                protocol: TCP
              - containerPort: 2222
                protocol: TCP
              readinessProbe:
                initialDelaySeconds: 30
                periodSeconds: 5
                tcpSocket:
                  port: 55555
              livenessProbe:
                timeoutSeconds: 6
                initialDelaySeconds: 300
                periodSeconds: 60
                tcpSocket:
                  port: 55555
  - kind: Service
    apiVersion: v1
    metadata:
      name: '${APPLICATION_NAME}-vmr'
      annotations:
        description: 'Exposes the VMR services'
    spec:
      ports:
      - name: 'semp'
        port: 8080
        targetPort: 8080
      - name: 'semp-secure'
        port: 60943
        targetPort: 60943
      - name: 'smf'
        port: 55555
        targetPort: 55555
      - name: 'smf-zip'
        port: 55003
        targetPort: 55003
      - name: 'smf-routing'
        port: 55556
        targetPort: 55556
      - name: 'smf-secure'
        port: 55443
        targetPort: 55443
      - name: 'smf-http'
        port: 6080
        targetPort: 6080
      - name: 'smf-https'
        port: 60443
        targetPort: 60443
      - name: 'mqtt'
        port: 1883
        targetPort: 1883
      - name: 'mqtt-secure'
        port: 8883
        targetPort: 8883
      - name: 'mqtt-http'
        port: 8000
        targetPort: 8000
      - name: 'mqtt-https'
        port: 8443
        targetPort: 8443
      - name: 'rest'
        port: 9000
        targetPort: 9000
      - name: 'rest-secure'
        port: 9443
        targetPort: 9443
      - name: 'ssh'
        port: 2222
        targetPort: 2222
      selector:
        deploymentconfig: '${APPLICATION_NAME}-vmr'
      type: ClusterIP
      sessionAffinity: None
      clusterIP: None
  - kind: BuildConfig
    apiVersion: v1
    metadata:
      name: '${APPLICATION_NAME}-aggregator'
    spec:
      triggers:
        - type: ImageChange
          imageChange: {}
      source:
        type: Git
        git:
          uri: '${GIT_URI}'
          ref: '${GIT_REF}'
        contextDir: 'aggregator'
      strategy:
        type: Source
        sourceStrategy:
          from:
            kind: ImageStreamTag
            name: 's2i-java:latest'
            #name: 'redhat-openjdk18-openshift:latest'
      output:
        to:
          kind: ImageStreamTag
          name: '${APPLICATION_NAME}-aggregator:latest'
      resources: {}
  - kind: BuildConfig
    apiVersion: v1
    metadata:
      name: '${APPLICATION_NAME}-worker'
    spec:
      triggers:
        - type: ImageChange
          imageChange: {}
      source:
        type: Git
        git:
          uri: '${GIT_URI}'
          ref: '${GIT_REF}'
        contextDir: 'worker'
      strategy:
        type: Source
        sourceStrategy:
          from:
            kind: ImageStreamTag
            name: 's2i-java:latest'
            #name: 'redhat-openjdk18-openshift:latest'
      output:
        to:
          kind: ImageStreamTag
          name: '${APPLICATION_NAME}-worker:latest'
      resources: {}
  - kind: ImageStream
    apiVersion: v1
    metadata:
      name: '${APPLICATION_NAME}-aggregator'
    spec:
      dockerImageRepository: ''
      tags:
        - name: latest
  - kind: ImageStream
    apiVersion: v1
    metadata:
      name: '${APPLICATION_NAME}-worker'
    spec:
      dockerImageRepository: ''
      tags:
        - name: latest
  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      name: '${APPLICATION_NAME}-aggregator'
    spec:
      strategy:
        type: Rolling
        rollingParams:
          updatePeriodSeconds: 1
          intervalSeconds: 1
          timeoutSeconds: 600
        resources: {}
      triggers:
        - type: ConfigChange
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - '${APPLICATION_NAME}-aggregator'
            from:
              kind: ImageStreamTag
              name: '${APPLICATION_NAME}-aggregator:latest'
      replicas: 1
      selector:
        deploymentconfig: '${APPLICATION_NAME}-aggregator'
      template:
        metadata:
          labels:
            deploymentconfig: '${APPLICATION_NAME}-aggregator'
        spec:
          containers:
            - name: '${APPLICATION_NAME}-aggregator'
              image: '${APPLICATION_NAME}-aggregator'
              ports:
                - containerPort: 8090
                  protocol: TCP
              env:
              - name: 'solace_java_host'
                value: '${APPLICATION_NAME}-vmr'
              - name: 'solace_java_msgVpn'
                value: 'default'
              - name: 'solace_java_clientUsername'
                value: 'default'
              - name: 'solace_java_clientPassword'
                value: 'default'
              livenessProbe:
                tcpSocket:
                  port: 8090
                initialDelaySeconds: 30
                timeoutSeconds: 1
              resources: {}
              terminationMessagePath: /dev/termination-log
              imagePullPolicy: IfNotPresent
              securityContext:
                capabilities: {}
                privileged: false
          restartPolicy: Always
          dnsPolicy: ClusterFirst
  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      name: '${APPLICATION_NAME}-worker'
    spec:
      strategy:
        type: Rolling
        rollingParams:
          updatePeriodSeconds: 1
          intervalSeconds: 1
          timeoutSeconds: 600
        resources: {}
      triggers:
        - type: ConfigChange
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - '${APPLICATION_NAME}-worker'
            from:
              kind: ImageStreamTag
              name: '${APPLICATION_NAME}-worker:latest'
      replicas: 1
      selector:
        deploymentconfig: '${APPLICATION_NAME}-worker'
      template:
        metadata:
          labels:
            deploymentconfig: '${APPLICATION_NAME}-worker'
        spec:
          containers:
            - name: '${APPLICATION_NAME}-worker'
              image: '${APPLICATION_NAME}-worker'
              env:
              - name: 'solace_java_host'
                value: '${APPLICATION_NAME}-vmr'
              - name: 'solace_java_msgVpn'
                value: 'default'
              - name: 'solace_java_clientUsername'
                value: 'default'
              - name: 'solace_java_clientPassword'
                value: 'default'
              resources: {}
              terminationMessagePath: /dev/termination-log
              imagePullPolicy: IfNotPresent
              securityContext:
                capabilities: {}
                privileged: false
          restartPolicy: Always
          dnsPolicy: ClusterFirst
  - kind: Route
    apiVersion: v1
    metadata:
      name: '${APPLICATION_NAME}-aggregator'
    spec:
      host: 'aggregator.${APPLICATION_SUBDOMAIN}'
      to:
        kind: Service
        name: 'aggregator'
      tls:
        termination: edge
      wildcardPolicy: None
  - kind: Service
    apiVersion: v1
    metadata:
      name: 'aggregator'
    spec:
      ports:
        - name: '${APPLICATION_NAME}-aggregator-http'
          port: 8090
          targetPort: 8090
      selector:
        deploymentconfig: '${APPLICATION_NAME}-aggregator'
      #type: ClusterIP
      type: NodePort
      sessionAffinity: None
# The following routes are not required by the application however they will allow
# external applications, modules or users to monitor, manage and configure the VMR.
  - kind: Route
    apiVersion: v1
    metadata:
      name: '${APPLICATION_NAME}-semp'
    spec:
      host: 'semp.${APPLICATION_SUBDOMAIN}'
      to:
        kind: Service
        name: '${APPLICATION_NAME}-vmr'
      port:
        targetPort: semp
      tls:
        termination: edge
        insecureEdgeTerminationPolicy: Allow
      wildcardPolicy: None
# The following routes are not required by the application however they will allow
# external applications, modules or users to reach the VMR services and interact with the
# application via the Message Bus.
  - kind: Route
    apiVersion: v1
    metadata:
      name: '${APPLICATION_NAME}-smf-http'
    spec:
      host: 'smf.${APPLICATION_SUBDOMAIN}'
      to:
        kind: Service
        name: '${APPLICATION_NAME}-vmr'
      port:
        targetPort: smf-http
      tls:
        termination: edge
        insecureEdgeTerminationPolicy: Allow
      wildcardPolicy: None
  - kind: Route
    apiVersion: v1
    metadata:
      name: '${APPLICATION_NAME}-mqtt-http'
    spec:
      host: 'mqtt.${APPLICATION_SUBDOMAIN}'
      to:
        kind: Service
        name: '${APPLICATION_NAME}-vmr'
      port:
        targetPort: mqtt-http
      tls:
        termination: edge
        insecureEdgeTerminationPolicy: Allow
      wildcardPolicy: None
  - kind: Route
    apiVersion: v1
    metadata:
      name: '${APPLICATION_NAME}-rest'
    spec:
      host: 'rest.${APPLICATION_SUBDOMAIN}'
      to:
        kind: Service
        name: '${APPLICATION_NAME}-vmr'
      port:
        targetPort: rest
      tls:
        termination: edge
        insecureEdgeTerminationPolicy: Allow
      wildcardPolicy: None
      
  - kind: PersistentVolumeClaim
    apiVersion: v1
    metadata:
      name: poddata-${ROUTER_NAME}
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 64Gi 

parameters:
  - name: APPLICATION_NAME
    displayName: Application name
    description: The name for the application.
    generate: expression
    from: '[A-Z0-9]{8}'
    value: messaging-sample
    required: true
  - name: APPLICATION_SUBDOMAIN
    displayName: Application subdomain
    description: >-
      The subdomain the application uses for its routes hostnames.
    value: openshift.example.com
  - name: GIT_URI
    description: Git source URI for application
    value: 'https://github.com/SolaceLabs/solace-messaging-demo.git'
  - name: GIT_REF
    description: Git branch/tag reference
    value: master
  - name: VMR_IMAGE
    displayName: VMR Image
    description: >-
      Fully qualified VMR image name.
    value: 172.30.1.1:5000/solace/solace-app
  - name: ROUTER_NAME
    displayName: Router Name
    description: The name of the router to instantiate.
    value: vmr1
  - name: ADMIN_USER
    description: Username of the admin user
    generate: expression
    from: '[A-Z0-9]{8}'
    value: admin
  - name: ADMIN_PASSWORD
    description: Password of the admin user
    generate: expression
    from: '[A-Z0-9]{8}'
    value: admin
labels:
  application: solace-springboot-messaging-sample
  createdBy: template-solace-springboot-messaging-sample